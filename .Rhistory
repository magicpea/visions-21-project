# equal to the number of hours in a year
hours_in_a_year <- 24 * 7 * 52
# Create a variable `more_minutes_than_hours` that is boolean (TRUE/FALSE)
# It should be TRUE if there are more minutes/day than hours/year
# Otherwise it should be FALSE
more_minutes_than_hours <- minutes_in_a_day > hours_in_a_year
# Working with functions -------------------------------------------------------
# Write a function `make_introduction()` that takes in two args (`name`, `age`)
# This function should return a string value that says:
# "Hello, my name is {name}, and I'm {age} years old."
# The values {name} and {age} should take on the values passed into the function
# Make sure that proper spacing is used (e.g., you shouldn't have multiple
# spaces between words, and you should have a space after a comma)
# Hint: google search for "R paste paste0 difference"
#       Try reading a few pages to understand how to use each
make_introduction <- function(name, age) {
paste0("Hello, my name is ", name, ", and I'm ", age, " years old")
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
# Create a variable `casual_intro` by substituting "Hello, my name is ",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- sub("Hello, my name is ", "Hey, I'm ", my_intro)
# Create a variable `loud_intro`, which is `my_intro` in all upper-case letters
# You should do this by using a function to convert your `my_intro` variable
# into all capital letters.
loud_intro <- toupper(my_intro)
# Create a variable `quiet_intro`, which is `my_intro` in all lower-case letters
# You should do this by using a function to convert your `my_intro` variable
# into all lower-case letters.
quiet_intro <- tolower(my_intro)
# Create a new variable `capitalized_intro`, which is your `my_intro` variable,
# but with each word capitalized. hint: google the stringr function `str_to_title`
capitalized_intro <- str_to_title(my_intro)
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
occurrences <- str_count(my_intro, "e")
# Write a function `double()` that takes in a value and
# returns that value times two
double <- function(num) {
num * 2
}
# Using your `double()` function, create a variable `minutes_in_two_days`,
# which is the number of minutes in two days
minutes_in_two_days <- double(minutes_in_a_day)
# Write a function `cube()` that takes in a value and returns that value cubed
cube <- function(num) {
num * num * num
}
# Create a variable `twenty_seven` by passing 3 to your `cube()` function
twenty_seven <- cube(3)
# Create a function `inches_to_cm` that converts from inches to centimeters
inches_to_cm <- function(inches) {
inches * 2.54
}
# Create a variable `inches_tall` that is your (numeric) height in inches
inches_tall <- 64
# Using your `inches_to_cm` function and your `inches_tall` variable,
# create a variable `cm_tall` that is your height in centimeters
cm_tall <- inches_to_cm(inches_tall)
# Write a function `has_more_zs` to determine which of two strings contains
# more instances of the letter "z". It should take as parameters two string
# variables, and return the argument which has more occurances of the letter "z"
# If neither phrase contains the letter "z", it should return:
# "Neither string contains the letter z."
# If the phrases contain the same number of "z"s, it should return:
# "The strings have the same number of Zs."
# The function must work for both capital and lowercase "z"s.
has_more_zs <- function(str_1, str_2) {
count_1 <- str_count(tolower(str_1), "z")
count_2 <- str_count(tolower(str_2), "z")
if(count_1 == 0 && count_2 == 0) {
"Neither string contains the letter z."
} else if(count_1 == count_2) {
"The strings have the same number of Zs."
} else {
if(count_1 > count_2) {
str_1
} else {
str_2
}
}
}
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs("Fizzy Zebras", "Zanzibar Zest Zinger")
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(v) {
gsub('[0-9]+', '', v)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
sample <- remove_digits(c("INFO 201", "CSE 142"))
# Vectors ----------------------------------------------------------------------
# Create a vector `movies` that contains the names of six movies you like
movies <- c("Oceans 11", "Oceans 12", "Wolf of Wall Street", "Parasite", "La Vie d'Adele", "Call Me By Your Name")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[1:3]
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- paste(movies, "is a great movie!")
# Create a vector `without_four` by omitting the fourth element from `movies`
# You should do this using a _negative index_
without_four <- movies[-4]
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
multiples_of_4 <- c(4:400)[4:400 %% 4 == 0]
# Create a vector `multiples_of_8` by filtering your `multiples_of_4` variable
# down to only elements that are divisible by 8.
multiples_of_8 <- multiples_of_4[multiples_of_4 %% 8 == 0]
# Create a vector `numbers` that is the numbers 700 through 999
numbers <- c(seq(700, 999))
# Using the built in `length()` function, create a variable `numbers_len`
# that is equal to the length of your vector `numbers`
numbers_len <- length(numbers)
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
numbers_mean <- mean(numbers)
# Using the `median()` function, create a variable `numbers_median`
# that is the median of your vector `numbers`
numbers_median <- median(numbers)
# Create a vector `lower_numbers` that the values in your `numbers` vector
# that are lower than `numbers_mean` (you should do this using vector filtering)
lower_numbers <- numbers[numbers < numbers_mean]
# Create a vector `higher_numbers` that the values in your `numbers` vector
# that are higher than `numbers_mean` (again, using vector filtering)
higher_numbers <- numbers[numbers > numbers_mean]
# Lists ------------------------------------------------------------------------
# Create a list called `summary_info` in which you'll store summary information
# about the `numbers` vector above. The list should have the following keys:
# - `length`: in which you'll store the length of the vector
# - `mean`: in which you'll store the mean of the vector
# - `median`: in which you'll store the median of the vector
summary_info <- list (
length <- numbers_len,
mean <- numbers_mean,
median <- numbers_median
)
# Now, write a function called `summarize_vector` that takes in a vector of
# numbers, and returns a list of summary information about that vector
# (including the mean, median, and length)
summarize_vector <- function(v) {
summary <- list (
length <- length(v),
mean <- mean(v),
median <- median(v)
)
return(summary)
}
# Create a list `summary_1_to_100` by passing a vector of the values one
# through one hundred to your `summarize_vector` function
summary_1_to_100 <- summarize_vector(1:100)
my_breakfast <- c("Tea", "Gummy vitamins")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("Fried rice", "Grapefruit", "Cucumbers", "Hummus")
# Create a list `meals` that has contains your breakfast and lunch
meals <- c(my_breakfast, my_lunch)
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("Tea", "Gummy vitamins")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("Fried rice", "Grapefruit", "Cucumbers", "Hummus")
# Create a list `meals` that has contains your breakfast and lunch
meals <- c(my_breakfast, my_lunch)
meals <- list(my_breakfast, my_lunch)
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(my_breakfast, my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals[["dinner"]] <- c("Soup", "Smoothie")
meals$dinner
[["my_lunch"]]
meals[["my_lunch"]]
meals[[my_lunch]]
meals[['my_lunch']]
meals[["my_lunch"]]
meals[5] <- meals[["my_lunch"]]
early_meals <- list(meals["my_breakfast"], meals["my_lunch"])
meals[5] <- meals[["my_lunch"]]
number_of_items <- list(lapply(meals, length))
add_pizza <- function(v) {
append(v, "pizza")
}
better_meals <- add_pizza(meals)
View(better_meals)
View(better_meals)
random_numbers <- as.list(runif(10))
View(random_numbers)
View(random_numbers)
lapply(round(random_numbers))
lapply(round(random_numbers, 2))
lapply(random_numbers, round(random_numbers, 2))
lapply(random_numbers, round(random_numbers, digits = 1))
lapply(random_numbers, round(digits = 1))
lapply(random_numbers, round())
lapply(random_numbers, round(1))
lapply(random_numbers, round(random_numbers_1))
lapply(random_numbers, round(), 1)
lapply(random_numbers, round, 1)
sentence <- tolower("Welcome to INFO 201 A, Technical Foundations of Informatics! This course introduces fundamental tools and technologies necessary to transform raw data into information. In doing so, you'll learn how to write code to work with data.")
strsplit(sentence, "")
vector_of_letters <- c(strsplit(sentence, ""))
vector_of_letters <- [[strsplit(sentence, "")]]
# Extract the vector of letters from the resulting list
vector_of_letters <- [strsplit(sentence, "")]
strsplit(sentence, "")
vector_of_letters <- strsplit(sentence, "")[1]
# Extract the vector of letters from the resulting list
v1 <- strsplit(sentence, "")[1]
v_1 <- strsplit(sentence, "")[1]
# Use the `unique()` function to get a vector of unique letters
v_2 <- unique(v)
v_2 <- unique(v_1)
v_1 <- strsplit(sentence, "")$
View(v_1)
View(v_1)
# Extract the vector of letters from the resulting list
v_1 <- strsplit(sentence, "")$[[1]]
v_1 <- strsplit(sentence, "")[[1]]
split_list <- strsplit(sentence, "")
v_1 <- split_list[[1]]
# Use the `unique()` function to get a vector of unique letters
v_2 <- unique(v_1)
count_occurrences <- function(letter, vector) {
str_count(vector, letter)
}
number_of_es <- count_occurrences(sentence, "e")
number_of_es <- count_occurrences("e", sentence)
# Convert the result into a list (using `as.list()`).
as.list(sapply(sentence, count_occurrences, v_2))
sample <- as.list(sapply(sentence, count_occurrences, v_2))
# Print the resulting list of frequencies
paste(sample)
# Convert the result into a list (using `as.list()`).
sample <- as.list(sapply(sentence, count_occurrences, v_2, sentence))
sample <- as.list(sapply(v_2, count_occurrences, sentence))
View(sample)
View(sample)
paste(sample)
sample <- as.list(sapply(sentence, count_occurrences, v_2))
paste(sample)
sample <- as.list(sapply(v_2, count_occurrences, sample))
paste(sample)
num_points <- c(12, 30, 12 , 21)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
num_points_against <- c(28, 24, 27, 36)
# Combine your two vectors into a dataframe called `games`
games <- data.frame(num_points, num_points_against)
games$diff = num_points_against - num_points
View(games)
View(games)
games$won = (num_points > num_points_against)
View(games)
View(games)
opponent_names <- c("Rams", "Panthers", "Cardinals", "49ers")
# Assign your dataframe rownames of their opponents
rownames(games, opponent_names)
View(games)
View(games)
rownames(opponent_names, games)
rownames(games, opponent_names)
rownames(games, TRUE, opponent_names)
View(games)
View(games)
rownames(games) <- opponent_names
View(games)
View(games)
view(games)
View(games)
# Loading of external libraries necessary to run R files
# library("dplyr")
# library("ggplot2")
# library("plotly")
# library("leaflet")
# Sourcing of external R files written by the group
# source("chart1.R")
source("/Users/marieoconnell/Desktop/Info201/final-project-magicpea/scripts/summary.R")
source("/Users/marieoconnell/Desktop/Info201/final-project-magicpea/scripts/sales_plot.R")
source("/Users/marieoconnell/Desktop/Info201/final-project-magicpea/scripts/summary_table.R")
source("/Users/marieoconnell/Desktop/Info201/final-project-magicpea/scripts/classifications.R")
# Dataframes to be read into Rmd for usage in external R files
cannabis_df <- read.csv(file = "/Users/marieoconnell/Desktop/Info201/final-project-magicpea/data/cannabis.csv", stringsAsFactors = FALSE)
# strains_and_features_df <- read.csv(file = "/final-project-magicpea/data/Cannabis_Strains_Features.csv", stringsAsFactors = FALSE)
sales_df <- read.csv(file = "/Users/marieoconnell/Desktop/Info201/final-project-magicpea/data/COMJSalesMonthReports2019.csv", stringsAsFactors = FALSE)
# %>% slice(1:65)
get_info(cannabis_df)
library("knitr")
summary <- data.frame(
Type = c("hybrid", "indica", "sativa"),
Number_of_Stars_per_Type = num_stars_per_type,
Percent_Stars_per_Type = percent_stars_per_type,
Average_Stars = avg_stars_per_type,
Number_of_Strains_per_Type = num_strains_per_type,
stringsAsFactors = FALSE
)
table <- kable(aggregate(list(summary$num_stars_per_type, summary$percent_stars_per_type,
summary$avg_stars_per_type, summary$num_strains_per_type), by =
list(summary$Type)))
summary <- data.frame(
Type = c("hybrid", "indica", "sativa"),
Number_of_Stars_per_Type = num_stars_per_type,
Percent_Stars_per_Type = percent_stars_per_type,
Average_Stars = avg_stars_per_type,
Number_of_Strains_per_Type = num_strains_per_type,
stringsAsFactors = FALSE
)
df <- read.csv (file = "/Users/marieoconnell/Desktop/Info201/final-project-magicpea/data/cannabis.csv",
stringsAsFactors = FALSE)
get_summary_table <- function(df) {
df <- df %>%
group_by(Type, Rating) %>%
mutate(Count = n())   # Count column is number of same type that has same rating
# issue is that things can get double counted if we just tally up the Counts
# Find the total number of stars given across all types
total_stars <- sum(df$Rating)
# Find the number of stars each type has
num_stars_per_type <- c(sum(filter(df, Type == "hybrid")$Rating),
sum(filter(df, Type == "indica")$Rating),
sum(filter(df, Type == "sativa")$Rating))
# Find the number of strains each type has
num_strains_per_type <- c(nrow(subset(df, df$Type == "hybrid")),
nrow(subset(df, df$Type == "indica")),
nrow(subset(df, df$Type == "sativa")))
# Find what percentage of existing stars does each type has
percent_stars_per_type <- round(num_stars_per_type / total_stars * 100, digits = 2)
# Find the average number of stars each type has
avg_stars_per_type <- round(num_stars_per_type / (num_strains_per_type), digits = 2)
summary <- data.frame(
Type = c("hybrid", "indica", "sativa"),
Number_of_Stars_per_Type = num_stars_per_type,
Percent_Stars_per_Type = percent_stars_per_type,
Average_Stars = avg_stars_per_type,
Number_of_Strains_per_Type = num_strains_per_type,
stringsAsFactors = FALSE
)
# kable(aggregate(list(df$num_killed, df$num_injured),
#                 by = list(df$state, df$region), sum), col.names = c("State", "Region",
#                                                                     "Number of Deaths", "Number of Injuries"))
# table <- kable(aggregate(list(summary$num_stars_per_type, summary$percent_stars_per_type,
#                               summary$avg_stars_per_type, summary$num_strains_per_type), by =
#                            list(summary$Type)))
}
get_summary_table(df)
get_summary_table <- function(df) {
df <- df %>%
group_by(Type, Rating) %>%
mutate(Count = n())   # Count column is number of same type that has same rating
# issue is that things can get double counted if we just tally up the Counts
# Find the total number of stars given across all types
total_stars <- sum(df$Rating)
# Find the number of stars each type has
num_stars_per_type <- c(sum(filter(df, Type == "hybrid")$Rating),
sum(filter(df, Type == "indica")$Rating),
sum(filter(df, Type == "sativa")$Rating))
# Find the number of strains each type has
num_strains_per_type <- c(nrow(subset(df, df$Type == "hybrid")),
nrow(subset(df, df$Type == "indica")),
nrow(subset(df, df$Type == "sativa")))
# Find what percentage of existing stars does each type has
percent_stars_per_type <- round(num_stars_per_type / total_stars * 100, digits = 2)
# Find the average number of stars each type has
avg_stars_per_type <- round(num_stars_per_type / (num_strains_per_type), digits = 2)
summary <- data.frame(
Type = c("hybrid", "indica", "sativa"),
Number_of_Stars_per_Type = num_stars_per_type,
Percent_Stars_per_Type = percent_stars_per_type,
Average_Stars = avg_stars_per_type,
Number_of_Strains_per_Type = num_strains_per_type,
stringsAsFactors = FALSE
)
# kable(aggregate(list(df$num_killed, df$num_injured),
#                 by = list(df$state, df$region), sum), col.names = c("State", "Region",
#                                                                     "Number of Deaths", "Number of Injuries"))
# table <- kable(aggregate(list(summary$num_stars_per_type, summary$percent_stars_per_type,
#                               summary$avg_stars_per_type, summary$num_strains_per_type), by =
#                            list(summary$Type)))
return(summary)
}
dff <- get_summary_table(df)
View(dff)
View(dff)
get_summary_table <- function(df) {
df <- df %>%
group_by(Type, Rating) %>%
mutate(Count = n())   # Count column is number of same type that has same rating
# issue is that things can get double counted if we just tally up the Counts
# Find the total number of stars given across all types
total_stars <- sum(df$Rating)
# Find the number of stars each type has
num_stars_per_type <- c(sum(filter(df, Type == "hybrid")$Rating),
sum(filter(df, Type == "indica")$Rating),
sum(filter(df, Type == "sativa")$Rating))
# Find the number of strains each type has
num_strains_per_type <- c(nrow(subset(df, df$Type == "hybrid")),
nrow(subset(df, df$Type == "indica")),
nrow(subset(df, df$Type == "sativa")))
# Find what percentage of existing stars does each type has
percent_stars_per_type <- round(num_stars_per_type / total_stars * 100, digits = 2)
# Find the average number of stars each type has
avg_stars_per_type <- round(num_stars_per_type / (num_strains_per_type), digits = 2)
summary <- data.frame(
Type = c("hybrid", "indica", "sativa"),
Number_of_Stars_per_Type = num_stars_per_type,
Percent_Stars_per_Type = percent_stars_per_type,
Average_Stars = avg_stars_per_type,
Number_of_Strains_per_Type = num_strains_per_type,
stringsAsFactors = FALSE
)
# kable(aggregate(list(df$num_killed, df$num_injured),
#                 by = list(df$state, df$region), sum), col.names = c("State", "Region",
#                                                                     "Number of Deaths", "Number of Injuries"))
table <- kable(aggregate(list(summary$num_stars_per_type, summary$percent_stars_per_type,
summary$avg_stars_per_type, summary$num_strains_per_type), by =
list(summary$Type), sum), col.names = c("Type", "Number of Stars", "Percentage of Stars",
"Average Number of Stars", "Number of Strains"))
return(table)
}
get_summary_table(df)
get_summary_table <- function(df) {
df <- df %>%
group_by(Type, Rating) %>%
mutate(Count = n())   # Count column is number of same type that has same rating
# issue is that things can get double counted if we just tally up the Counts
# Find the total number of stars given across all types
total_stars <- sum(df$Rating)
# Find the number of stars each type has
num_stars_per_type <- c(sum(filter(df, Type == "hybrid")$Rating),
sum(filter(df, Type == "indica")$Rating),
sum(filter(df, Type == "sativa")$Rating))
# Find the number of strains each type has
num_strains_per_type <- c(nrow(subset(df, df$Type == "hybrid")),
nrow(subset(df, df$Type == "indica")),
nrow(subset(df, df$Type == "sativa")))
# Find what percentage of existing stars does each type has
percent_stars_per_type <- round(num_stars_per_type / total_stars * 100, digits = 2)
# Find the average number of stars each type has
avg_stars_per_type <- round(num_stars_per_type / (num_strains_per_type), digits = 2)
summary <- data.frame(
Type = c("hybrid", "indica", "sativa"),
Number_of_Stars_per_Type = num_stars_per_type,
Percent_Stars_per_Type = percent_stars_per_type,
Average_Stars = avg_stars_per_type,
Number_of_Strains_per_Type = num_strains_per_type,
stringsAsFactors = FALSE
)
# kable(aggregate(list(df$num_killed, df$num_injured),
#                 by = list(df$state, df$region), sum), col.names = c("State", "Region",
#                                                                     "Number of Deaths", "Number of Injuries"))
# table <- kable(aggregate(list(summary$num_stars_per_type, summary$percent_stars_per_type,
#                               summary$avg_stars_per_type, summary$num_strains_per_type), by =
#                            list(summary$Type), sum), col.names = c("Type", "Number of Stars", "Percentage of Stars",
#                                                                    "Average Number of Stars", "Number of Strains"))
# return(table)
return(summary)
}
get_summary_table(df)
# Loading of external libraries necessary to run R files
# library("dplyr")
# library("ggplot2")
# library("plotly")
# library("leaflet")
# Sourcing of external R files written by the group
# source("chart1.R")
source("/Users/marieoconnell/Desktop/Info201/final-project-magicpea/scripts/summary.R")
source("/Users/marieoconnell/Desktop/Info201/final-project-magicpea/scripts/sales_plot.R")
source("/Users/marieoconnell/Desktop/Info201/final-project-magicpea/scripts/summary_table.R")
source("/Users/marieoconnell/Desktop/Info201/final-project-magicpea/scripts/classifications.R")
# Dataframes to be read into Rmd for usage in external R files
cannabis_df <- read.csv(file = "/Users/marieoconnell/Desktop/Info201/final-project-magicpea/data/cannabis.csv", stringsAsFactors = FALSE)
strains_and_features_df <- read.csv(file = "/Users/marieoconnell/Desktop/Info201/final-project-magicpea/data/Cannabis_Strains_Features.csv",
stringsAsFactors = FALSE)
sales_df <- read.csv(file = "/Users/marieoconnell/Desktop/Info201/final-project-magicpea/data/COMJSalesMonthReports2019.csv", stringsAsFactors = FALSE)
# %>% slice(1:65)
data <- get_info(cannabis_df)
shiny::runApp('Desktop/Info201/a6-magicpea')
runApp('~/Desktop/Info201/exercises-magicpea/chapter-19-exercises/exercise-7')
runApp('Desktop/Info201/final-project-magicpea')
runApp('Desktop/Info201/a6-magicpea')
View(df)
View(df)
strains_and_features_df <- read.csv(
file = "data/Cannabis_Strains_Features.csv",
stringsAsFactors = FALSE
)
library(tidyverse)
library(ncdf4)
install.packages("ncdf4")
library(tidyverse)
library(ncdf4)
nc_data <- nc_open("~/Downloads/flor_20190616-20190916.nc")
git status
library(tidyverse)
library(ncdf4)
library(IDPmisc)
small_dataset <- read.csv("/data/small_dataset_OOI.csv")
small_dataset <- read.csv("/data/small_dataset_OOI.csv")
small_dataset <- read.csv("data/small_dataset_OOI.csv")
library(tidyverse)
library(ncdf4)
library(IDPmisc)
setwd("~/Desktop/Visions21/visions-21-project")
library(tidyverse)
library(ncdf4)
library(IDPmisc)
small_dataset <- read.csv("~/data/OOI_code.csv")
setwd("~/Desktop/Visions21/visions-21-project")
small_dataset <- read.csv("~/data/OOI_code.csv")
small_dataset <- read.csv("~/data/OOI_code.csv")
thin_layers <- write.csv(thin_layers, "~/Downloads/thin_layers.csv")
